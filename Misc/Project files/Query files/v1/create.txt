CREATE TABLE users(
user_id SERIAL PRIMARY KEY,
username VARCHAR(20) UNIQUE NOT NULL,
email VARCHAR(100) UNIQUE NOT NULL,
user_type VARCHAR(50) CHECK(user_type IN ('client', 'freelancer')) NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
password_hash VARCHAR(50) NOT NULL
);

CREATE TABLE clients(
client_id INT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
company_name VARCHAR(50),
business_type VARCHAR(50)
);

CREATE TABLE projects(
project_id SERIAL PRIMARY KEY,
client_id INT REFERENCES clients(client_id) ON DELETE CASCADE,
title VARCHAR(200),
description TEXT,
budget DECIMAL(10,2) CHECK(budget>=0),
deadline DATE NOT NULL,
posted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
status VARCHAR(50) CHECK(status IN ('open','in progress','completed','cancelled'))
);

CREATE TABLE freelancers(
freelancer_id INT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
bio TEXT,
portfolio TEXT,
experience INT CHECK(experience >=0),
hourly_rate DECIMAL(10,2) CHECK(hourly_rate>=0)
);

CREATE TABLE skills(
skill_id SERIAL PRIMARY KEY,
skill_name VARCHAR(200) UNIQUE NOT NULL
);

CREATE TABLE freelancer_skills (
    skill_id INT REFERENCES skills(skill_id) ON DELETE CASCADE,
    freelancer_id INT REFERENCES freelancers(freelancer_id) ON DELETE CASCADE,
    PRIMARY KEY (skill_id, freelancer_id)
);

CREATE TABLE proposals(
proposal_id SERIAL PRIMARY KEY,
freelancer_id INT REFERENCES freelancers(freelancer_id) ON DELETE CASCADE,
project_id INT REFERENCES projects(project_id) ON DELETE CASCADE,
proposal_text TEXT NOT NULL,
bid_amount DECIMAL(10,2) CHECK(bid_amount>=0),
submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE reviews(
review_id SERIAL PRIMARY KEY,
reviewer_id INT REFERENCES users(user_id) ON DELETE CASCADE,
reviewee_id INT REFERENCES users(user_id) ON DELETE CASCADE,
review_text TEXT,
rating INT CHECK(rating BETWEEN 1 AND 5),
review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE endorsements(
endorsement_id SERIAL PRIMARY KEY,
client_id INT REFERENCES users(user_id) ON DELETE CASCADE,
freelancer_id INT REFERENCES freelancers(freelancer_id) ON DELETE CASCADE,
endorsement_text TEXT
);

CREATE TABLE contracts(
contract_id SERIAL PRIMARY KEY,
client_id INT REFERENCES clients(client_id) ON DELETE CASCADE,
freelancer_id INT REFERENCES freelancers(freelancer_id) ON DELETE CASCADE,
project_id INT REFERENCES projects(project_id) ON DELETE CASCADE,
proposal_id INT REFERENCES proposals(proposal_id) ON DELETE CASCADE,
agreed_price DECIMAL(10,2) CHECK(agreed_price>=0),
start_date DATE NOT NULL,
end_date DATE,
status VARCHAR(50) CHECK(status IN ('active', 'completed', 'cancelled') )
);

CREATE TABLE contract_modifications(
modification_id SERIAL PRIMARY KEY,
contract_id INT REFERENCES contracts(contract_id) ON DELETE CASCADE,
modified_by INT REFERENCES users(user_id) ON DELETE CASCADE,
modified_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
old_price DECIMAL(10,2),
new_price DECIMAL(10,2),
old_deadline DATE,
new_deadline DATE,
status VARCHAR(50) CHECK(status IN ('pending','approved','rejected'))
);

CREATE TABLE payments(
payment_id SERIAL PRIMARY KEY,
contract_id INT REFERENCES contracts(contract_id) ON DELETE CASCADE,
amount DECIMAL(10,2) CHECK(amount>=0),
payment_method VARCHAR(100) NOT NULL,
status VARCHAR(50) CHECK (status IN ('completed', 'failed'))
);

CREATE TABLE invoices(
invoice_id SERIAL PRIMARY KEY,
contract_id INT REFERENCES contracts(contract_id) ON DELETE CASCADE,
net_amount DECIMAL(10,2) CHECK(net_amount>=0),
issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
due_date DATE NOT NULL,
status VARCHAR(50) CHECK(status IN('pending','paid','overdue')),
paid_at TIMESTAMP
);

CREATE TABLE submissions(
submission_id SERIAL PRIMARY KEY,
submitted_by INT REFERENCES freelancers(freelancer_id) ON DELETE CASCADE,
contract_id INT REFERENCES contracts(contract_id) ON DELETE CASCADE,
description TEXT,
submitted_file VARCHAR(500),
submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
approved BOOLEAN DEFAULT FALSE
);

CREATE TABLE withdrawals(
withdrawal_id SERIAL PRIMARY KEY,
requested_by INT REFERENCES users(user_id) ON DELETE CASCADE,
approved_by INT REFERENCES users(user_id) ON DELETE CASCADE,
contract_id INT REFERENCES contracts(contract_id) ON DELETE CASCADE,
reason TEXT,
status VARCHAR(50) CHECK(status IN ('pending','approved','rejected')),
withdrawn_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE support_tickets(
ticket_id SERIAL PRIMARY KEY,
raised_by INT REFERENCES users(user_id) ON DELETE CASCADE,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
subject VARCHAR(300) NOT NULL,
description TEXT NOT NULL,
status VARCHAR(50) CHECK(status IN('open','in progress', 'resolved', 'closed')),
resolved_at TIMESTAMP
);

drop table reviews CASCADE

--View names of all tables
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public';